/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;

/**
 * Clase que representa la interfaz gráfica principal del programa.
 * @author Fabiana Rodríguez
 * @Colaboradores Luis Peña
 */
public class Interfaz extends javax.swing.JFrame {
    private JLabel instruccion;
    private JLabel instruccion1;
    private JButton cargarArchivo;
    private JButton mostrarRecorridoArbol;
    private JButton buscarEspecie;
    private JRadioButton buscarEspeciePorHash;
    private JRadioButton buscarEspeciePorRecorrido;
    private JTextField tiempoEjecucion;
    
    /**
     * Constructor que inicializa la interfaz gráfica.
     */
    public Interfaz() {
        setTitle("Clave Dicotómica");
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        
        //Generación del PAGE_START
        JPanel pageStart = new JPanel(new GridLayout(1,1));
        instruccion = new JLabel("¡Bienvenido, por favor presione el botón 'Cargar Archivo' para usar las funciones del programa!");
        //instruccion.setFont(new Font("Arial",Font.PLAIN, 14));
        pageStart.add(instruccion);
        add(pageStart, BorderLayout.PAGE_START);
        
        //Generación del LINE_START
        JPanel lineStart = new JPanel(new GridLayout(6,1)); //Modificable
        lineStart.add(cargarArchivo = new JButton("Cargar Archivo"));
        lineStart.add(instruccion1 = new JLabel("Funciones del programa:"));
        lineStart.add(mostrarRecorridoArbol = new JButton("Mostrar Árbol"));
        lineStart.add(buscarEspecie = new JButton("Buscar Especie"));
        lineStart.add(buscarEspeciePorHash = new JRadioButton("Por Hash"));
        lineStart.add(buscarEspeciePorRecorrido = new JRadioButton("Por Recorrido del árbol"));
        //lineStart.add();
        add(lineStart, BorderLayout.LINE_START);
        
        
        
    
        
        pack();
        
        cargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JFileChooser fileChooser = new JFileChooser();
                int result = fileChooser.showOpenDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    System.out.println("Archivo seleccionado: " + selectedFile.getAbsolutePath());
                    // Lógica para cargar el archivo JSON
                }
            }
        });
        
        mostrarRecorridoArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Lógica para mostrar el árbol gráficamente usando GraphStream
                System.out.println("Mostrando árbol...");
            }
        });
        
        buscarEspeciePorHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String especie = buscarEspeciePorHash.getText();
                System.out.println("Buscando especie: " + especie);
                // Lógica para buscar la especie
            }
        });
        
        buscarEspeciePorRecorrido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String especie = buscarEspeciePorRecorrido.getText();
                System.out.println("Buscando especie: " + especie);
                // Lógica para buscar la especie
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 653, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
   
    
    /**
     * Método principal que inicia la aplicación.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*try {
            
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
